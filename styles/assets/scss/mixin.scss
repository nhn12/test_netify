@import 'variables';

// Function for converting a px based font-size to rem.
@function rem-calc($size) {
  $rem-size: $size / $font-size-base;
  @return #{$rem-size}rem;
}

$rem-baseline: 10px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == 'comma' or $separator == 'space' {
    @return append($list, null, $separator);
  }
  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 10px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == 'list' {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

@mixin linear-gradient($color1,$stop1,$color2,$stop2) {
  background: $color1; /* Old browsers */
  background: -moz-linear-gradient(left, $color1 $stop1, $color2 $stop2); /* FF3.6-15 */
  background: -webkit-linear-gradient(left, $color1 $stop1,$color2 $stop2); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(to right, $color1 $stop1,$color2 $stop2); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
}

/* CSS3 calc() function to perform calculations */
@mixin calc($property, $expression) {
  #{$property}: calc(#{$expression});
}

@mixin mobile-small {
  @media screen and (max-width: #{$screen-xs-down}) {
    @content;
  }
}

@mixin mobile-large {
  @media screen and (min-width: #{$screen-xs}) {
    @content;
  }
}

@mixin mobile-xlarge {
  @media screen and (min-width: #{$screen-sm}) {
    @content;
  }
}

@mixin tablet-down {
  @media screen and (max-width: #{$screen-sm-up}) {
    @content;
  }
}

@mixin tablet-up {
  @media screen and (min-width: #{$screen-md}) {
    @content;
  }
}

@mixin desktop-down {
  @media screen and (max-width: #{$screen-md-up}) {
    @content;
  }
}

@mixin desktop-up {
  @media screen and (min-width: #{$screen-lg}) {
    @content;
  }
}

@mixin lg-desktop-up {
  @media screen and (min-width: #{$screen-xlg}) {
    @content;
  }
}

@mixin xlg-desktop-up {
  @media screen and (min-width: #{$screen-xxlg}) {
    @content;
  }
}

